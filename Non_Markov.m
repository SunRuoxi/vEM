
%% ****************************************************************************************************
%%
%% Scalable variational inference for super resolution microscopy 
%% This code was demonstrated in MATLAB 2013a version with CPU
%% This code is the main function of the non-Markov model. The six steps of the non-Markov model. 
%% Parameters: 
%%         obs.tif               : file name of raw camera images, ex) xxx.tif
%%         N                     : number of frames to be reconstructed
%%         dfactor               : resolution up-scaled factor, 1 CCD image pixel = dfactor * 1 high resolution pixel  
%%         scale                 : number of photons per fluorophore
%%         img_size              : size of raw camera images, i.e. 32x32
%%         high_size             : size of high resolution images  
%%         CCD_pitch             : raw camera pixel size in nm
%%         high_resolution_pitch : high resolution pixel size in nm
%%         psf                   : width of Gaussian fuctions, i.e. standard deviation of gaussian blur in the unit of image pixels 
%%         p                     : emission probability 
%%         baseline              : background noise 
%%         offset                : value of dark pixils 
%%         vEM_nIter             : number of iterations of one round of vEM 
%%         evaluation_radius     : the distance within which we define an emitter is for a true fluorophore 
%%         Results               : FALCON output, a list of emitters with their positions and photon counts in the format of 5 columns matrix. 
%                                  || frame number || x positions || y positions || photon counts || PSF_width_ratio
%% ****************************************************************************************************
 
%% Parameters
close all; clear all; 

% direct to vEM folder
vEM_folder = pwd; 

mkdir('data'); % speficy the folder we write results in 
folder = [vEM_folder,'\data\']; 

addpath(genpath([vEM_folder,'\function'])); % add the path of "function folder"  
addpath(genpath([vEM_folder,'\adigator'])); % autodiff package


% Experimental setup 
psf = 1.5;   
dfactor = 3;  
N = 2000; 
scale = 1000; 
baseline = 0.1; 
p = 0.04;  

% Image parameters
img_size = 32;  
CCD_pitch = 100; 
high_resolution_pitch = CCD_pitch/dfactor;  
high_size = img_size * dfactor; 
offset = 0;  
  
% vEM parameters
vEM_nIter = 5;
 
%evaluation 
evaluation_radius = high_resolution_pitch * 1.5;  
%% ************************************************************ Step -1: pre-train hessians in stock  ************************************************************
% generate hessians with number of fluorophores from 1 to a certain number of fluorophores (i.e. maximum of fluorophores per frame)  
% those hessian functions are generated by autodiff (adigator package), can be called whenever a certain number of fluorophores in the observed images are encountered
% stock hessian functions to avoid re-differentiate 
% write in folder "hessians" 
% for the same image size, we only need to call this function once. 
max_num_of_fluo = 50; 
vEM_pretrain_hessian(max_num_of_fluo, img_size); 
%% ************************************************************   Step 0: Simulation  ************************************************************

% generate simulated images and write the images into 'obs.tif'  
[simparm,  true_poses] =  vEM_simulation(psf, dfactor, img_size, scale, p, N, baseline, CCD_pitch, folder);

% save 
save([folder,'simparm'],'simparm');    %  parameters of the simulations      
save([folder,'true_poses'],'true_poses');  %  x, y positions of a list of emitters 
%% ************************************************************     Step 1: FALCON    ************************************************************
% Run FALCON
tic
[Results, background_est] = vEM_FALCON([folder,'obs.tif'], N, psf, offset);
t=toc 
save([folder,'Results'],'Results');
save([folder,'background_est'],'background_est');

% Plot FALCON
out_falcon = vEM_FALCON_EmittersToImage(Results, img_size, dfactor, N); %  Reconstructed image from a list of emitters from FALCON output

figure; bdy = 28; % bdy is empty margin  
imagesc(out_falcon(bdy:high_size-bdy,bdy:high_size-bdy));  
title(['FALCON: N=',num2str(N),', p=',num2str(simparm.p),', dfactor=',num2str(dfactor),', psf=',num2str(psf) ]); axis off 
saveas(1, [folder, 'falcon', '.png'])

% Evaluation 
% Accurracy of reconstructed image (overall) 
FALCON_overall_evaluation = vEM_evaluation_overall(out_falcon, simparm.I, 1); 
FALCON_overall_evaluation.t = t;
save([folder, 'FALCON_overall_evaluation'],'FALCON_overall_evaluation');
% Accuracy of localization of individual fluorophore (individual)
FALCON_evaluation = vEM_evaluation_FALCON(Results, true_poses, high_resolution_pitch, N, evaluation_radius, simparm);
save([folder, 'FALCON_evaluation'],'FALCON_evaluation');


%% ************************************************************   Step 2: prepare vEM-1    ************************************************************
% Prepare VB-1 (refine, calculate hessian, generate q0) 

refine = 1;  % refine (1) or not (0). Refine is eq 11 of http://biorxiv.org/content/biorxiv/early/2016/11/19/081703.full.pdf
test_peaks = 0;  % whether to plot poisson likelihood against laplace approximation; after check a couple of frames, turn it off (slow). 

% Generate 'stat' (contains refine & hessian results) and 'qstack0'(q distribution before update) 
tic
   [stat, qstack0] = vEM_HessianInStock_qdist(simparm, Results, img_size, background_est, refine, test_peaks); 
t=toc

save([folder,'stat'],'stat')
save([folder,'qstack0'],'qstack0')

% Plot initial q (q0 before vEM update)
w = extractfield(qstack0,'w'); %intensity or number of photons 
[im0, im_stack0] = vEM_GetLambda0_weighted(qstack0,w,img_size,dfactor);% generate image from q distribution, each q is weighted by its intensities

figure(2)
imagesc(im0(bdy:high_size-bdy,bdy:high_size-bdy)), title(['initial q0, p=',num2str(simparm.p),', N=',num2str(N)]); colorbar
saveas(2, [folder, 'q0_initial-1.png'])

% Evaluation 
% Accurracy of reconstructed image (overall) 
Refine_overall_evaluation = vEM_evaluation_overall(im0, simparm.I, 1); 
Refine_overall_evaluation.t = t;
save([folder, 'Refine_overall_evaluation'],'Refine_overall_evaluation');
% Accuracy of localization of individual fluorophore (individual)
Refine_evaluation = vEM_evaluation_q_dist(qstack0, true_poses, high_resolution_pitch, evaluation_radius, simparm); 
save([folder, 'Refine_evaluation'],'Refine_evaluation'); 
%% ************************************************************     Step 3: vEM-1      ************************************************************
% determine soft threhold (emprirical) 
% reconstruct the image from q without being weighted by intensities w
w = []; 
[im0_1, im_stack0] = vEM_GetLambda0_weighted(qstack0,w,img_size,dfactor);  
 
thre_level =  2.4583e-05*length(qstack0) + 0.2369; % should adjust based on different context of data 
thre = max(im0_1(:))* thre_level;   

draw = 1; % draw intermediate result of each iterations. 
w = extractfield(qstack0,'w'); 
tic
[lambda0_stack, qstack] = vEM_updates(qstack0, vEM_nIter, thre, w, img_size, draw, dfactor); 
t=toc

save([folder,'qstack'],'qstack')
save([folder,'lambda0_stack'],'lambda0_stack')

% Save and Plot vEM-1
w = extractfield(qstack,'w'); 
[im, im_stack] = vEM_GetLambda0_weighted(qstack,w,img_size,dfactor);
figure(3)
imagesc(im(bdy:high_size-bdy,bdy:high_size-bdy)), title(['vEM,thre=',num2str(thre),', p=',num2str(simparm.p),', N=',num2str(length(qstack))]); colorbar
saveas(3, [folder,'vEM-1-thre-',num2str(thre),'.png'])
 

% Evaluate
% Accurracy of reconstructed image (overall) 
vEM_1_overall_evaluation = vEM_evaluation_overall(im, simparm.I, 1) ; 
vEM_1_overall_evaluation.t = t;
save([folder, 'vEM_1_overall_evaluation'],'vEM_1_overall_evaluation');
% Accuracy of localization of individual fluorophore (individual)
vEM_1_evaluation =  vEM_evaluation_q_dist(qstack, true_poses, high_resolution_pitch, evaluation_radius, simparm); 
save([folder,'vEM_1_evaluation'],'vEM_1_evaluation'); 

 
%% ************************************************************     Step 4: Constrained FALCON      ************************************************************

mkdir(folder,'constraint'); % save results of constrained falcon and after in a new folder 
folder_c = [folder,'constraint','\']; 
 
% The constraint
lambda0 = lambda0_stack(:,:,end); % results from step 3

% Constrainted FALCON
tic 
[Results_constraint,back_est_constraint] = vEM_constrained_FALCON([folder,'obs.tif'],N,offset,psf,lambda0); 
t=toc

%vEM_constrained_FALCON(filename, numFrame, baseline, Gsigma1, lambda0)
save([folder_c,'Results_constraint'],'Results_constraint');
save([folder_c,'back_est_constraint'],'back_est_constraint');

% Save and Plot constraint FALCON
out_constraint  = vEM_FALCON_EmittersToImage(Results_constraint, img_size, dfactor, N);
save([folder_c,'out_constraint'],'out_constraint');

figure(4)
imagesc(out_constraint(bdy:high_size-bdy,bdy:high_size-bdy));  colorbar 
title(['constraint FALCON: N=',num2str(N),', p=',num2str(simparm.p) ])
saveas(4,[folder_c, 'constraint falcon output', '.png'])

% Evaluation 
% Accurracy of reconstructed image (overall) 
Constraint_FALCON_overall_evaluation = vEM_evaluation_overall(out_constraint, simparm.I, 1) ; 
Constraint_FALCON_overall_evaluation.t = t;
save([folder_c, 'Constraint_FALCON_overall_evaluation'],'Constraint_FALCON_overall_evaluation');
% Accuracy of localization of individual fluorophore (individual)
Constraint_FALCON_evaluation = vEM_evaluation_FALCON(Results_constraint,true_poses,high_resolution_pitch,N,evaluation_radius, simparm);
save([folder_c, 'Constraint_FALCON_evaluation'],'Constraint_FALCON_evaluation')
 
%% ************************************************************     Step 5: Prepare vEM-2      ************************************************************
% Generate hessians and q distribution 
tic
   [stat_constraint, qstack0_constraint] = vEM_HessianInStock_qdist(simparm, Results_constraint, img_size, back_est_constraint, refine, test_peaks); 
t=toc

save([folder_c,'stat_constraint'],'stat_constraint')
save([folder_c,'qstack0_constraint'],'qstack0_constraint')


% Save and Plot q_ini-2
w = extractfield(qstack0_constraint,'w'); 
[im0_constraint, im_stack0_constraint] = vEM_GetLambda0_weighted(qstack0_constraint,w,img_size,dfactor);

figure(5)
imagesc(im0_constraint(bdy:high_size-bdy,bdy:high_size-bdy)), title(['after constraint FALCON (refine), initial q0, p=',num2str(simparm.p),', N=',num2str(N)]); colorbar
saveas(5, [folder_c, 'q_initial-2.png'])

% Evaluation
% Accurracy of reconstructed image (overall) 
constraint_Refine_overall_evaluation = vEM_evaluation_overall(im0_constraint, simparm.I, 1) ; 
constraint_Refine_overall_evaluation.t = t;
save([folder_c, 'constraint_Refine_overall_evaluation'],'constraint_Refine_overall_evaluation');
% Accuracy of localization of individual fluorophore (individual)
constraint_Refine_evaluation = vEM_evaluation_q_dist(qstack0_constraint, true_poses, high_resolution_pitch, evaluation_radius, simparm); 
save([folder_c, 'constraint_Refine_evaluation'],'constraint_Refine_evaluation'); 

  
%% ************************************************************     Step 6: vEM-2      ************************************************************

% Determine soft threhold (empirical)
w = []; 
[im0_2, im_stack0] = vEM_GetLambda0_weighted(qstack0_constraint,w,img_size,dfactor);  % reconstructed image by q distribution, not weighted by intensity 

thre_level =  1.7663e-05*length(qstack0_constraint) + 0.2369; % empirical percentage of max value of im0_2
thre = max(im0_2(:))*thre_level; 
 

draw = 1; % draw intermediate result of each iterations. 
w = extractfield(qstack0_constraint,'w'); 
tic
[lambda0_stack_constraint, qstack_constraint] = vEM_updates(qstack0_constraint, vEM_nIter, thre, w, img_size, draw, dfactor); 
t=toc

save([folder_c,'qstack_constraint'],'qstack_constraint');
save([folder_c,'lambda0_stack_constraint'],'lambda0_stack_constraint');

% Save and Plot output of vEM
[im_constraint, im_stack_constraint] = vEM_GetLambda0_weighted(qstack_constraint,w,img_size,dfactor);
save([folder_c,'im_constraint'],'im_constraint');

figure(6)
imagesc(im_constraint(bdy:high_size-bdy,bdy:high_size-bdy)), title(['vEM-2,thre=',num2str(thre),', p=',num2str(simparm.p),', N=',num2str(N)]); colorbar
saveas(6, [folder_c,'vEM-2-thre-',num2str(thre),'.png']);

% Evaluate
% Accurracy of reconstructed image (overall) 
constraint_vEM_2_overall_evaluation = vEM_evaluation_overall(im_constraint, simparm.I, 1) ; 
constraint_vEM_2_overall_evaluation.t = t;
save([folder_c, 'constraint_vEM_2_overall_evaluation'],'constraint_vEM_2_overall_evaluation');
% Accuracy of localization of individual fluorophore (individual)
constraint_vEM_2_evaluation =  vEM_evaluation_q_dist(qstack_constraint, true_poses, high_resolution_pitch, evaluation_radius, simparm); 
save([folder_c,'constraint_vEM_2_evaluation'],'constraint_vEM_2_evaluation');


%% Save all evaluation
evaluation_all = [FALCON_evaluation,Refine_evaluation,vEM_1_evaluation,Constraint_FALCON_evaluation,constraint_Refine_evaluation, constraint_vEM_2_evaluation]; 
save([folder_c,'evaluation_all'],'evaluation_all');

overall_evaluation_all = [FALCON_overall_evaluation,Refine_overall_evaluation,vEM_1_overall_evaluation,Constraint_FALCON_overall_evaluation,constraint_Refine_overall_evaluation,constraint_vEM_2_overall_evaluation]; 
save([folder_c,'overall_evaluation_all'],'overall_evaluation_all');

reconstructed_image = {out_falcon; im; out_constraint; im_constraint};
save([folder_c,'reconstructed_image'],'reconstructed_image'); 
%% Plot steps 
vEM_PlotEvaluation_individual(evaluation_all, folder_c); 
vEM_PlotEvaluation_overall(overall_evaluation_all, reconstructed_image, folder_c, bdy, high_size, N); 